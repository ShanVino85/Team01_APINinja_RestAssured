{"uuid":"609312ab-4da7-4aa4-b83c-24c8cc261c8a","historyId":"7fccabc3e175671ebaa297fe90412b7b","fullName":"src/test/resources/features/10_DeleteandLogoutNegative.feature:12","labels":[{"name":"tag","value":"tag10"},{"name":"tag","value":"Test02"},{"name":"host","value":"DESKTOP-0NN2DFH"},{"name":"thread","value":"32268@DESKTOP-0NN2DFH.main(1)"},{"name":"feature","value":"All Modules Delete and logout Modules Negative"},{"name":"story","value":"Check dietician able to delete patient by invalid id"},{"name":"suite","value":"All Modules Delete and logout Modules Negative"},{"name":"testClass","value":"Check dietician able to delete patient by invalid id"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///C:/Users/shanj/vino-workspace/Team01_API_Ninja/src/test/resources/features/10_DeleteandLogoutNegative.feature"},{"name":"package","value":"src.test.resources.features.10_DeleteandLogoutNegative_feature.All Modules Delete and logout Modules Negative"}],"links":[],"name":"Check dietician able to delete patient by invalid id","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"parameterValue cannot be null","trace":"java.lang.IllegalArgumentException: parameterValue cannot be null\r\n\tat java.base/jdk.internal.reflect.GeneratedConstructorAccessor137.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\r\n\tat io.restassured.internal.common.assertion.AssertParameter.notNull(AssertParameter.groovy:26)\r\n\tat io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)\r\n\tat io.restassured.internal.RequestSpecificationImpl.pathParam(RequestSpecificationImpl.groovy:515)\r\n\tat api.stepdefinitions.DeleteandLogoutModules.dietician_create_delete_request_by_invalid_id(DeleteandLogoutModules.java:126)\r\n\tat ✽.Dietician create DELETE request by invalid id(file:///C:/Users/shanj/vino-workspace/Team01_API_Ninja/src/test/resources/features/10_DeleteandLogoutNegative.feature:13)\r\n"},"stage":"finished","steps":[{"name":"Given  Dietician create DELETE request by invalid id","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"parameterValue cannot be null","trace":"java.lang.IllegalArgumentException: parameterValue cannot be null\r\n\tat java.base/jdk.internal.reflect.GeneratedConstructorAccessor137.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\r\n\tat io.restassured.internal.common.assertion.AssertParameter.notNull(AssertParameter.groovy:26)\r\n\tat io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)\r\n\tat io.restassured.internal.RequestSpecificationImpl.pathParam(RequestSpecificationImpl.groovy:515)\r\n\tat api.stepdefinitions.DeleteandLogoutModules.dietician_create_delete_request_by_invalid_id(DeleteandLogoutModules.java:126)\r\n\tat ✽.Dietician create DELETE request by invalid id(file:///C:/Users/shanj/vino-workspace/Team01_API_Ninja/src/test/resources/features/10_DeleteandLogoutNegative.feature:13)\r\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1724342859652,"stop":1724342859655},{"name":"When  Dietician send DELETE http request with endpoint by invalid id","status":"skipped","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1724342859655,"stop":1724342859655},{"name":"Then  Dietici recieves 401 unauthorized","status":"skipped","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1724342859655,"stop":1724342859655}],"attachments":[],"parameters":[],"start":1724342859652,"stop":1724342859656}